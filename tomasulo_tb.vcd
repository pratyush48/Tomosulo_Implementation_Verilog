$date
	Sat May 30 09:09:18 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tomasulo_tb $end
$var reg 1 ! clk1 $end
$var reg 1 " clk2 $end
$var reg 4 # pc [3:0] $end
$var integer 32 $ clock_cycle [31:0] $end
$var integer 32 % k [31:0] $end
$scope module tomas $end
$var wire 1 ! clk1 $end
$var wire 1 " clk2 $end
$var wire 4 & pc [3:0] $end
$var wire 16 ' inst [15:0] $end
$var reg 3 ( head_p [2:0] $end
$var reg 4 ) pr1_func [3:0] $end
$var reg 4 * pr1_rd [3:0] $end
$var reg 4 + pr1_rs1 [3:0] $end
$var reg 4 , pr1_rs2 [3:0] $end
$var reg 1 - pr2_count $end
$var reg 4 . pr2_func [3:0] $end
$var reg 4 / pr2_rd [3:0] $end
$var reg 3 0 pr2_rob_ind [2:0] $end
$var reg 4 1 pr2_rs1 [3:0] $end
$var reg 4 2 pr2_rs2 [3:0] $end
$var reg 4 3 pr3_exec_b [3:0] $end
$var reg 3 4 tail_p [2:0] $end
$var integer 32 5 add_count [31:0] $end
$var integer 32 6 bch_count [31:0] $end
$var integer 32 7 mul_count [31:0] $end
$var integer 32 8 pr3_addcount [31:0] $end
$var integer 32 9 pr3_mulcount [31:0] $end
$scope module is1 $end
$var wire 1 ! clk1 $end
$var wire 1 " clk2 $end
$var wire 4 : func [3:0] $end
$var wire 4 ; rd [3:0] $end
$var wire 4 < rs1 [3:0] $end
$var wire 4 = rs2 [3:0] $end
$var reg 16 > Zout [15:0] $end
$scope module rs $end
$var wire 1 ! clk1 $end
$var wire 1 " clk2 $end
$var wire 1 - count $end
$var wire 4 ? func [3:0] $end
$var wire 4 @ rd [3:0] $end
$var wire 3 A rob_ind [2:0] $end
$var wire 4 B rs1 [3:0] $end
$var wire 4 C rs2 [3:0] $end
$var reg 4 D ex_b [3:0] $end
$var reg 1 E rs1_b $end
$var reg 1 F rs2_b $end
$var integer 32 G add_index [31:0] $end
$var integer 32 H mul_index [31:0] $end
$var integer 32 I temp [31:0] $end
$var integer 32 J temp2 [31:0] $end
$var integer 32 K temp3 [31:0] $end
$var integer 32 L temp4 [31:0] $end
$scope module ex1 $end
$var wire 1 ! clk1 $end
$var wire 1 " clk2 $end
$var wire 1 M ex_b $end
$var wire 4 N func [3:0] $end
$var wire 4 O rd [3:0] $end
$var wire 3 P rob_ind [2:0] $end
$var wire 8 Q rs1_data [7:0] $end
$var wire 8 R rs2_data [7:0] $end
$var wire 3 S rs_index [2:0] $end
$var reg 16 T out1 [15:0] $end
$var integer 32 U count_as [31:0] $end
$var integer 32 V count_md [31:0] $end
$var integer 32 W temp [31:0] $end
$upscope $end
$scope module ex2 $end
$var wire 1 ! clk1 $end
$var wire 1 " clk2 $end
$var wire 1 X ex_b $end
$var wire 4 Y func [3:0] $end
$var wire 4 Z rd [3:0] $end
$var wire 3 [ rob_ind [2:0] $end
$var wire 8 \ rs1_data [7:0] $end
$var wire 8 ] rs2_data [7:0] $end
$var wire 3 ^ rs_index [2:0] $end
$var reg 16 _ out1 [15:0] $end
$var integer 32 ` count_as [31:0] $end
$var integer 32 a count_md [31:0] $end
$var integer 32 b temp [31:0] $end
$upscope $end
$scope module ex3 $end
$var wire 1 ! clk1 $end
$var wire 1 " clk2 $end
$var wire 1 c ex_b $end
$var wire 4 d func [3:0] $end
$var wire 4 e rd [3:0] $end
$var wire 3 f rob_ind [2:0] $end
$var wire 8 g rs1_data [7:0] $end
$var wire 8 h rs2_data [7:0] $end
$var wire 3 i rs_index [2:0] $end
$var reg 16 j out1 [15:0] $end
$var integer 32 k count_as [31:0] $end
$var integer 32 l count_md [31:0] $end
$var integer 32 m temp [31:0] $end
$upscope $end
$scope module ex4 $end
$var wire 1 ! clk1 $end
$var wire 1 " clk2 $end
$var wire 1 n ex_b $end
$var wire 4 o func [3:0] $end
$var wire 4 p rd [3:0] $end
$var wire 3 q rob_ind [2:0] $end
$var wire 8 r rs1_data [7:0] $end
$var wire 8 s rs2_data [7:0] $end
$var wire 3 t rs_index [2:0] $end
$var reg 16 u out1 [15:0] $end
$var integer 32 v count_as [31:0] $end
$var integer 32 w count_md [31:0] $end
$var integer 32 x temp [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module k1 $end
$var wire 4 y PC [3:0] $end
$var wire 1 ! clk1 $end
$var reg 16 z output_instruction [15:0] $end
$var integer 32 { num [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx {
bx z
b0 y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
xn
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
xc
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
xX
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
xM
bx L
bx K
bx J
bx I
bx H
bx G
xF
xE
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
bx 2
bx 1
bx 0
bx /
bx .
x-
bx ,
bx +
bx *
bx )
b0 (
bx '
b0 &
b11 %
b0 $
b0 #
0"
0!
$end
#5
b11 *
b11 ;
b10 ,
b10 =
b1 +
b1 <
b10 )
b10 :
0M
0X
0c
0n
b10000100100011 '
b10000100100011 z
b0 {
b11 L
1F
1E
b11 I
b11 K
b11 J
b0 D
1!
#10
0!
#15
b11 /
b11 @
b10 .
b10 ?
b10 2
b10 C
b1 1
b1 B
b1 7
b1 4
b0 0
b0 A
1-
b1 #
b1 &
b1 y
1"
#20
b1 $
0"
#25
b101 *
b101 ;
b100 ,
b100 =
b11 +
b11 <
b0 )
b0 :
b11 I
b11 K
b11 J
b0 H
b110 L
b1101000101 '
b1101000101 z
b1 {
1!
#30
0!
#35
b101 /
b101 @
b0 .
b0 ?
b100 2
b100 C
b11 1
b11 B
b10 #
b10 &
b10 y
b1 5
b10 4
b1 0
b1 A
1-
1"
#40
b10 $
0"
#45
1c
b100 3
b100 D
b11 e
b0 f
b10 d
b10 h
b1 g
b0 i
b111 *
b111 ;
b110 ,
b110 =
b10 +
b10 <
b1001100111 '
b1001100111 z
b10 {
b0 G
b110 L
0E
b11 I
b1 9
b11 K
b11 J
1!
#50
0!
#55
b111 /
b111 @
b110 2
b110 C
b10 1
b10 B
b0 l
b0 k
b10 5
b11 4
b10 0
b10 A
1-
b11 #
b11 &
b11 y
1"
#60
b11 $
0"
#65
1n
b1100 3
b11 p
b0 q
b10 o
b10 s
b1 r
b0 t
0c
b1010 *
b1010 ;
b1001 ,
b1001 =
b1000 +
b1000 <
b11 I
b10 9
b11 K
b11 J
b1000 D
b1 G
b110 L
1E
b100010011010 '
b100010011010 z
b11 {
1!
#70
0!
#75
b1010 /
b1010 @
b1001 2
b1001 C
b1000 1
b1000 B
b100 #
b100 &
b100 y
b11 5
b100 4
b11 0
b11 A
1-
b0 w
b0 v
1"
#80
b100 $
0"
#85
1M
b1101 3
b111 O
b10 P
b0 N
b110 R
b10 Q
b1 S
b1011 *
b1011 ;
b1010 ,
b1010 =
b111 +
b111 <
b10 )
b10 :
0n
b10011110101011 '
b10011110101011 z
b100 {
b10 G
b110 L
b11 I
b11 K
b1 8
b11 J
b1 D
1!
#90
0!
#95
b1011 /
b1011 @
b10 .
b10 ?
b1010 2
b1010 C
b111 1
b111 B
b0 V
b0 U
b10 7
b101 4
b100 0
b100 A
1-
b101 #
b101 &
b101 y
1"
b11 m
b1 9
b1001 3
b1 l
b10 j
#100
b101 $
0"
#105
1X
b1011 3
b101 Z
b1 [
b0 Y
b100 ]
b10 \
b0 ^
0M
b110 *
b110 ;
b101 ,
b101 =
b1011 +
b1011 <
b1 )
b1 :
b11 I
b11 K
b10 8
b11 J
b10 D
b110 L
0F
0E
b1101101010110 '
b1101101010110 z
b101 {
1!
#110
0!
#115
b110 /
b110 @
b1 .
b1 ?
b101 2
b101 C
b1011 1
b1011 B
b110 #
b110 &
b110 y
b100 5
b110 4
b101 0
b101 A
1-
b0 a
b0 `
1"
b11 W
b1 8
b1 U
b1000 T
b11 x
b0 9
b10 3
b1 w
b10 u
#120
b110 $
0"
#125
1M
b11 3
b101 O
b1 P
b100 R
b0 S
bx *
bx ;
bx ,
bx =
bx +
bx <
bx )
bx :
0X
bx '
bx z
b110 {
b1 G
b110 L
b11 I
b11 K
b10 8
b11 J
b1 D
1!
#130
0!
#135
bx /
bx @
bx .
bx ?
bx 2
bx C
bx 1
bx B
b0 U
b111 4
b110 0
b110 A
1-
b111 #
b111 &
b111 y
1"
b11 b
b1 8
b1 3
b1 `
b110 _
#140
b111 $
0"
#145
1X
b11 3
b1010 Z
b11 [
b1001 ]
b1000 \
b10 ^
0M
b11 I
b11 K
b10 8
b11 J
b10 D
b11 L
1F
1E
b111 {
1!
#150
0!
#155
b0 `
b1000 #
b1000 &
b1000 y
b0 4
b111 0
b111 A
1-
1"
b11 W
b1 8
b10 3
b1 U
b110 T
#160
b1000 $
0"
#165
1M
b11 3
b1010 O
b11 P
b1001 R
b1000 Q
b10 S
0X
b1000 {
b11 L
b11 I
b11 K
b10 8
b11 J
b1 D
1!
#170
0!
#175
b0 U
b1 4
b0 0
b0 A
1-
b1001 #
b1001 &
b1001 y
1"
b11 b
b1 8
b1 3
b1 `
b10001 _
#180
b1001 $
0"
#185
0M
b11 I
b11 K
b11 J
b0 D
b11 L
b1001 {
1!
#190
0!
#195
b1010 #
b1010 &
b1010 y
b10 4
b1 0
b1 A
1-
1"
b11 W
b0 8
b0 3
b1 U
b10001 T
#200
b1010 $
0"
#205
b1010 {
b11 L
b11 I
b11 K
b11 J
1!
#210
0!
#215
b11 4
b10 0
b10 A
1-
b1011 #
b1011 &
b1011 y
1"
#220
b1011 $
0"
#225
b11 I
b11 K
b11 J
b11 L
b1011 {
1!
#230
0!
#235
b1100 #
b1100 &
b1100 y
b100 4
b11 0
b11 A
1-
1"
#240
b1100 $
0"
#245
b1100 {
b11 L
b11 I
b11 K
b11 J
1!
#250
0!
#255
b101 4
b100 0
b100 A
1-
b1101 #
b1101 &
b1101 y
1"
#260
b1101 $
0"
#265
b11 I
b11 K
b11 J
b11 L
b1101 {
1!
#270
0!
#275
b1110 #
b1110 &
b1110 y
b110 4
b101 0
b101 A
1-
1"
#280
b1110 $
0"
#285
b1110 {
b11 L
b11 I
b11 K
b11 J
1!
#290
0!
#295
b111 4
b110 0
b110 A
1-
b1111 #
b1111 &
b1111 y
1"
#300
b1111 $
0"
#305
b11 I
b11 K
b11 J
b11 L
b1111 {
1!
#310
0!
#315
b0 #
b0 &
b0 y
b0 4
b111 0
b111 A
1-
1"
#320
b10000 $
0"
#325
b11 *
b11 ;
b10 ,
b10 =
b1 +
b1 <
b10 )
b10 :
b10000100100011 '
b10000100100011 z
b0 {
b11 L
b11 I
b11 K
b11 J
1!
#330
0!
#335
b11 /
b11 @
b10 .
b10 ?
b10 2
b10 C
b1 1
b1 B
b11 7
b1 4
b0 0
b0 A
1-
b1 #
b1 &
b1 y
1"
#340
b10001 $
0"
#345
b101 *
b101 ;
b100 ,
b100 =
b11 +
b11 <
b0 )
b0 :
b11 I
b11 K
b11 J
b110 L
b1101000101 '
b1101000101 z
b1 {
1!
#350
0!
#355
b101 /
b101 @
b0 .
b0 ?
b100 2
b100 C
b11 1
b11 B
b10 #
b10 &
b10 y
b101 5
b10 4
b1 0
b1 A
1-
1"
#360
b10010 $
0"
#365
1c
b100 3
b100 D
b111 *
b111 ;
b110 ,
b110 =
b10 +
b10 <
b1001100111 '
b1001100111 z
b10 {
b0 G
b110 L
0E
b11 I
b1 9
b11 K
b11 J
1!
#370
0!
#375
b111 /
b111 @
b110 2
b110 C
b10 1
b10 B
b110 5
b11 4
b10 0
b10 A
1-
b11 #
b11 &
b11 y
b0 l
1"
#380
b10011 $
0"
#385
1n
b1100 3
0c
b1010 *
b1010 ;
b1001 ,
b1001 =
b1000 +
b1000 <
b11 I
b10 9
b11 K
b11 J
b1000 D
b10 G
b110 L
0F
1E
b100010011010 '
b100010011010 z
b11 {
1!
#390
0!
#395
b1010 /
b1010 @
b1001 2
b1001 C
b1000 1
b1000 B
b100 #
b100 &
b100 y
b111 5
b100 4
b11 0
b11 A
1-
b0 w
1"
#400
b10100 $
0"
#415
b11 m
b1 9
b1000 3
b1 l
#435
b11 x
b0 9
b0 3
b1 w
